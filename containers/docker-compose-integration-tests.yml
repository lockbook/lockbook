version: '3'

services:
  filesdb:
    image: minio/minio:RELEASE.2020-05-16T01-33-21Z
    env_file:
      - ../containers/test.env
    entrypoint: /bin/sh -c 'MINIO_REGION_NAME=$$FILES_DB_REGION /usr/bin/minio server /data'
  config_filesdb:
    image: minio/mc:RELEASE.2020-05-16T01-44-37Z
    env_file:
      - ../containers/test.env
    depends_on:
      - filesdb
    entrypoint: >
      /bin/sh -c '\
        while ! nc -z $$FILES_DB_HOST $$FILES_DB_PORT; do echo "$$FILES_DB_HOST Waiting for Minio to start..." && sleep 0.2; done; \
        /usr/bin/mc config host add filesdb $$FILES_DB_SCHEME://$$FILES_DB_HOST:$$FILES_DB_PORT $$FILES_DB_ACCESS_KEY $$FILES_DB_SECRET_KEY && \
        /usr/bin/mc mb --region=$$FILES_DB_REGION filesdb/$$FILES_DB_BUCKET && \
        /usr/bin/mc policy set public filesdb/$$FILES_DB_BUCKET && \
        tail -f /dev/null
      '
  indexdb:
    image: postgres:12.3
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
  config_indexdb:
    image: db_with_migration-$HASH
    container_name: config_indexdb-integration-$HASH
    env_file:
      - ../containers/test.env
    depends_on:
      - indexdb
    entrypoint: >
      /bin/sh -c '\
        while ! pg_isready -h $$INDEX_DB_HOST -p $$INDEX_DB_PORT -U $$INDEX_DB_USER; do echo "Waiting for Postgres to start..." && sleep 0.2; done; \
        psql -wq -h $$INDEX_DB_HOST -p $$INDEX_DB_PORT -U $$INDEX_DB_USER --db $$INDEX_DB_DB -f /index_db/create_db.sql && \
        tail -f /dev/null
      '
  lockbook_server:
    image: server:$HASH
    env_file:
      - ../containers/test.env
    depends_on:
      - config_filesdb
      - config_indexdb
    entrypoint: >
      /bin/sh -c '\
        sleep 5 && \
        RUST_LOG=lockbook_server=debug ./target/release/lockbook-server \
      '

  core_server_tests:
    container_name: core_server_tests-integration-$HASH
    image: core_server_tests:$HASH
    env_file:
      - ../containers/test.env
    depends_on:
      - lockbook_server
    entrypoint: >
      /bin/sh -c '\
        sleep 5 && \
        LOCKBOOK_DEBUG=1 cargo test --release --no-fail-fast -- --nocapture \
      '

  server_tests:
    container_name: server_tests-client-$HASH
    image: server_tests:$HASH
    env_file:
      - ../containers/test.env
    depends_on:
      - lockbook_server
    entrypoint: >
      /bin/sh -c '\
        sleep 5 && \
        RUST_LOG=lockbook_server=debug cargo test --release \
      '

  swift_interface_tests:
    container_name: swift_interface_tests-swift-$HASH
    image: swift_interface_tests:$HASH
    env_file:
      - ../containers/test.env
    depends_on:
      - lockbook_server
    entrypoint: >
      /bin/sh -c '\
        sleep 5 && \
        swift test
      '

  csharp_interface_tests:
    container_name: csharp_interface_tests-csharp-$HASH
    image: csharp_interface_tests:$HASH
    env_file:
      - ../containers/test.env
    depends_on:
      - lockbook_server
    entrypoint: >
      /bin/sh -c '\
        sleep 5 && \
        dotnet test
      '

  kotlin_interface_tests:
    container_name: kotlin_interface_tests-kotlin-$HASH
    image: kotlin_interface_tests:$HASH
    env_file:
      - ../containers/test.env
    depends_on:
      - lockbook_server
    entrypoint: >
      /bin/sh -c '\
        sleep 5 && \
        gradle testDebugUnitTest \
      '

  performance_bench:
    image: performance:$HASH
    env_file:
      - ../containers/test.env
    depends_on:
      - lockbook_server
    entrypoint: >
      /bin/sh -c '\
        sleep 5 && \
        LOCKBOOK_DEBUG=1 cargo bench -- --profile-time 5 && \
        pprof --svg $$(find . -type f -executable -name "performator-*") simple-create_write_read.profile > simple-create_write_read.svg \
      '